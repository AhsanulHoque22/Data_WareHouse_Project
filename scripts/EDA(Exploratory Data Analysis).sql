/*
==================================
Date Exploration
==================================
*/
-- Find the date of the first and last order
USE DataWarehouse;
SELECT 
    MIN(order_date) AS first_order,
    MAX(order_date) AS last_order,
    TIMESTAMPDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range_years,
    TIMESTAMPDIFF(MONTH, MIN(order_date), MAX(order_date)) AS order_range_months
FROM fact_sales;

-- Find the youngest and the oldest customer with age
SELECT
	MIN(birthdate) AS oldest_birthdate,
    TIMESTAMPDIFF(YEAR, MIN(birthdate), CURDATE()) AS oldest_customer_age,
    MAX(birthdate) AS youngest_birthdate,
    TIMESTAMPDIFF(YEAR, MAX(birthdate), CURDATE()) AS youngest_customer_age
FROM dim_customers;


/*
==================================
Measures Exploration
==================================
Calculate the key matric of the business (Big Numbers)
-> Highest level of aggrigation | Lowest level of details
*/

-- 1. Find the total sales
SELECT
	SUM(sales_amount) AS total_sales
FROM fact_sales;

-- 2. Find how many items sold
SELECT
	SUM(quantity) AS total_quantity
FROM fact_sales;

-- 3. Find the average selling price
SELECT
	AVG(price) AS average_price
FROM fact_sales;

-- 4. Find the total number of orders
SELECT
	COUNT(DISTINCT order_number) AS total_orders
FROM fact_sales;

-- 5. Find the total number of products
SELECT
	COUNT(DISTINCT product_name) AS total_products
FROM dim_products;

-- 6. Find the total number of customers
SELECT
	COUNT(customer_key) AS total_customers
FROM dim_customers;

-- 7. Find the total number of customers that placed an order
SELECT
	COUNT(DISTINCT customer_key) as total_ordering_customers
FROM fact_sales;



-- Generate a Report that shows all key matrics of the business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM fact_sales
UNION ALL
SELECT 'Total Sales', SUM(quantity) FROM fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_name) FROM dim_products
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM dim_customers
UNION ALL
SELECT 'Total Ordering Customers', COUNT(DISTINCT customer_key) FROM fact_sales;





/*
==================================
Magnitude Analysis
==================================
Compare the measure values by category
-> Understand the importance of different categories
*/

-- Find total customers by countries
SELECT
	country,
    COUNT(customer_key) AS total_customers
FROM dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total customers by gender
SELECT
	gender,
    COUNT(customer_key) AS total_customers
FROM dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category
SELECT
	category,
    COUNT(product_id) AS total_products
FROM dim_products
GROUP BY category
ORDER BY total_products DESC;

-- What is the average costs in each category?
SELECT
	category,
    AVG(cost) AS average_cost
FROM dim_products
GROUP BY category
ORDER BY average_cost DESC;

-- What is the total revenue generated for each category?
SELECT
	p.category,
	SUM(f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p
ON		  p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Find total revenue is generated by each customer
SELECT
	c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
    FROM fact_sales f
LEFT JOIN dim_customers c
ON		  c.customer_key = f.customer_key
GROUP BY
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- What is the distribution of sold items across countries?
SELECT
	c.country,
    SUM(f.quantity) AS total_quantity
    FROM fact_sales f
LEFT JOIN dim_customers c
ON		  c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_quantity DESC;




/*
==================================
Ranking
==================================
Order the values of dimensions by measure 
-> Help find Top N performers | Bottom N performers
*/

-- Which 5 products generate the highest revenue
SELECT
	p.product_name,
	SUM(f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p
ON		  p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;

-- What are the  worst-performing products in temrs of sales
SELECT
	p.product_name,
	SUM(f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p
ON		  p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue
LIMIT 5;

-- Which 5 subcategory generate the highest revenue
SELECT *
FROM (
	SELECT
		p.subcategory,
		SUM(f.sales_amount) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM fact_sales f
	LEFT JOIN dim_products p
	ON		  p.product_key = f.product_key
	GROUP BY p.subcategory)t
WHERE rank_products <= 5;

-- Find the Top-10 customers who have generatesd the highest revenue 
SELECT
	c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
    FROM fact_sales f
LEFT JOIN dim_customers c
ON		  c.customer_key = f.customer_key
GROUP BY
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC
LIMIT 10;

-- 3 customers with the fiewest orders placed
SELECT
	c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_revenue
    FROM fact_sales f
LEFT JOIN dim_customers c
ON		  c.customer_key = f.customer_key
GROUP BY
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue
LIMIT 3;